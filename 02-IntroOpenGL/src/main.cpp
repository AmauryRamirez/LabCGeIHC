//glew include
#include <GL/glew.h>

//std includes
#include <string>
#include <iostream>

//glfw include
#include <GLFW/glfw3.h>

// program include
#include "Headers/TimeManager.h"

int screenWidth;
int screenHeight;

GLFWwindow * window;

bool exitApp = false;
int lastMousePosX;
int lastMousePosY;

double deltaTime;

// Se definen todos las funciones.
void reshapeCallback(GLFWwindow* Window, int widthRes, int heightRes);
void keyCallback(GLFWwindow* window, int key, int scancode, int action, int mode);
void mouseCallback(GLFWwindow* window, double xpos, double ypos);
void mouseButtonCallback(GLFWwindow* window, int button, int state, int mod);
void init(int width, int height, std::string strTitle, bool bFullScreen);
void destroy();
bool processInput(bool continueApplication = true);

GLint vertexShaderID, fragmentShaderID, shaderProgramID;
GLuint VAO, VBO;

typedef struct _Vertex {
	float m_Pos[3];
	float m_color[3];
}  Vertex;


// Codigo de los shaders, por ahora se crean en una cadena de texto
// Shader de vertices
const GLchar * vertexShaderSource = "#version 330 core\n" 
		"layout (location=0) in vec3 in_position;\n"
		"layout (location=1) in vec3 in_color;\n"
		"out vec3 our_color;\n"
		"void main(){\n"
		"gl_Position = vec4(in_position, 1.0);\n"
		"our_color = in_color;\n"
		"}\0";
// Shader de fragmento
const GLchar * fragmentShaderSource = "#version 330 core\n"
		"out vec4 color;\n"
		"in vec3 our_color;\n"
		"void main(){\n"
		"color = vec4(our_color, 1.0);\n"
		"}\0";

// Implementacion de todas las funciones.
void init(int width, int height, std::string strTitle, bool bFullScreen) {
	
	if (!glfwInit()) {
		std::cerr << "Failed to initialize GLFW" << std::endl;
		exit(-1);
	}

	screenWidth = width;
	screenHeight = height;

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	if (bFullScreen)
		window = glfwCreateWindow(width, height, strTitle.c_str(),
			glfwGetPrimaryMonitor(), nullptr);
	else
		window = glfwCreateWindow(width, height, strTitle.c_str(), nullptr,
			nullptr);

	if (window == nullptr) {
		std::cerr
			<< "Error to create GLFW window, you can try download the last version of your video card that support OpenGL 3.3+"
			<< std::endl;
		destroy();
		exit(-1);
	}

	glfwMakeContextCurrent(window);
	glfwSwapInterval(0);

	glfwSetWindowSizeCallback(window, reshapeCallback);
	glfwSetKeyCallback(window, keyCallback);
	glfwSetCursorPosCallback(window, mouseCallback);
	glfwSetMouseButtonCallback(window, mouseButtonCallback);
	glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);

	// Init glew
	glewExperimental = GL_TRUE;
	GLenum err = glewInit();
	if (GLEW_OK != err) {
		std::cerr << "Failed to initialize glew" << std::endl;
		exit(-1);
	}

	glViewport(0, 0, screenWidth, screenHeight);
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);

	// Compilacion de los shaders

	// Se crea el id del Vertex Shader
	vertexShaderID = glCreateShader(GL_VERTEX_SHADER);
	// Se agrega el codigo fuente al ID
	glShaderSource(vertexShaderID, 1, &vertexShaderSource, NULL);
	// Compilación de Vertex Shader
	glCompileShader(vertexShaderID);
	GLint success;
	GLchar infoLog[512];
	// Se obtiene el estatus de la compilacion del vertex shader
	glGetShaderiv(vertexShaderID, GL_COMPILE_STATUS, &success);
	if(!success){
		// En caso de error se obtiene el error y lanza mensaje con error
		glGetShaderInfoLog(vertexShaderID, 512, NULL, infoLog);
		std::cout << "Error al compilar el VERTEX_SHADER." << infoLog << std::endl;
	}

	//Se crea el id del Fragment Shader
	fragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER);
	//Se agrega el codigo fuente al ID
	glShaderSource(fragmentShaderID, 1, &fragmentShaderSource, NULL);
	//Compilación de fragment shader
	glCompileShader(fragmentShaderID);
	//Se obtiene el status de la compilación del fragment shader
	glGetShaderiv(fragmentShaderID, GL_COMPILE_STATUS, &success);
	if (!success) {
		//En caso de error se obtiene el error y lanza mensaje con error
		glGetShaderInfoLog(fragmentShaderID, 512, NULL, infoLog);
		std::cout << "Errorr al compilar el FRAGMENT_SHADER." << infoLog << std::endl;
	}

	// Programa con los shaders
	shaderProgramID = glCreateProgram();
	// Se agregan el vertex y fragment shader al program
	glAttachShader(shaderProgramID, vertexShaderID);
	glAttachShader(shaderProgramID, fragmentShaderID);
	// Proceso de linkeo
	glLinkProgram(shaderProgramID);
	// Revision de error de linkeo del programa
	glGetProgramiv(shaderProgramID, GL_LINK_STATUS, &success);
	if(!success){
		glGetProgramInfoLog(shaderProgramID, 512, NULL, infoLog);
		std::cout << "ERROR al linkear el programa." << infoLog << std::endl;
	}

	// Se definen los vertices de la geometria a dibujar
	//GLfloat vertices[] = {-0.5, -0.5, 0.0, 0.5, -0.5, 0.0, 0.0, 0.5, 0.0};
	/*Vertex vertices[] = {
		{{-0.5f,-0.5f,0.0f}, {1.0f,0.0f,0.0f}},
		{{0.5f,-0.5f,0.0f}, {0.0f, 1.0f,0.0f}},
		{{0.5f, 0.5f,0.0f}, {0.0f,0.0f,1.0f}},
		{{-0.5f,-0.5f,0.0f}, {1.0f,0.0f,0.0f}},
		{{0.5f,0.5f,0.0f}, {0.0f,0.0f,1.0f}},
		{{-0.5f, 0.5f, 0.0f}, {1.0f,0.0f,1.0f}}
	};*/
	//	ESTRELLA
	/*Vertex vertices[] = {
		{{0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P0 Posición, Color
		{{0.2, 0.7, 0.0}, {0.0, 0.0, 0.0}}, //P3
		{{0.0, 0.7, 0.0}, {0.0, 0.0, 0.0}},	//P2
		{{0.0, 0.7, 0.0}, {0.0, 0.0, 0.0}}, //P2
		{{0.2, 0.7, 0.0}, {0.0, 0.0, 0.0}}, //P3
		{{0.0, 0.85, 0.0}, {0.0, 0.0, 0.0}}, //P4 FIN DE PRIMER TRIANGULO
		{{0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}},	//P0
		{{0.2, 0.7, 0.0}, {0.0, 0.0, 0.0}}, //P3
		{{-0.2, 0.7, 0.0}, {0.0, 0.0, 0.0}}, //P1
		{{-0.2, 0.7, 0.0}, {0.0, 0.0, 0.0}}, //P1
		{{0.2, 0.7, 0.0}, {0.0, 0.0, 0.0}}, //P3
		{{0.0, 0.85, 0.0}, {0.0, 0.0, 0.0}}, //P4 FIN DE PRIMER TRIANGULO
		{{0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P0
		{{-0.7, 0.2, 0.0}, {0.0, 0.0, 0.0}}, //P10
		{{-0.7, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P11
		{ {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P0
		{{-0.7, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P11
		{ {-0.7, -0.2, 0.0}, {0.0, 0.0, 0.0}}, //P9
		{ {-0.7, 0.2, 0.0}, {0.0, 0.0, 0.0}}, //P10
		{{-0.7, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P11
		{ {-0.85, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P12
		{ {-0.85, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P12
		{ {-0.7, 0.2, 0.0}, {0.0, 0.0, 0.0}}, //P10
		{{-0.7, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P11
		{ {-0.7, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P11
		{ {-0.85, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P12
		{ {-0.7, -0.2, 0.0}, {0.0, 0.0, 0.0}}, //P9 FIN TRIANGULO IZQUIERDO
		{ {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P0
		{ {0.7, 0.2, 0.0}, {0.0, 0.0, 0.0}}, //P14
		{ {0.7, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P15
		{ {0.7, 0.2, 0.0}, {0.0, 0.0, 0.0}}, //P14
		{ {0.7, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P15
		{ {0.85, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P16
		{ {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P0
		{ {0.7, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P15
		{ {0.7, -0.2, 0.0}, {0.0, 0.0, 0.0}}, //P13
		{ {0.7, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P15
		{ {0.7, -0.2, 0.0}, {0.0, 0.0, 0.0}}, //P13
		{ {0.85, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P16 FIN DEL TRIÁNGULO DERECHO
		{ {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P0
		{ {0.2, -0.7, 0.0}, {0.0, 0.0, 0.0}}, //P6
		{ {0.0, -0.7, 0.0}, {0.0, 0.0, 0.0}}, //P7
		{ {0.2, -0.7, 0.0}, {0.0, 0.0, 0.0}}, //P6
		{ {0.0, -0.7, 0.0}, {0.0, 0.0, 0.0}}, //P7
		{ {0.0, -0.85, 0.0}, {0.0, 0.0, 0.0}}, //P8
		{ {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}}, //P0
		{ {-0.2, -0.7, 0.0}, {0.0, 0.0, 0.0}}, //P5
		{ {0.0, -0.7, 0.0}, {0.0, 0.0, 0.0}}, //P7
		{ {-0.2, -0.7, 0.0}, {0.0, 0.0, 0.0}}, //P5
		{ {0.0, -0.7, 0.0}, {0.0, 0.0, 0.0}}, //P7
		{ {0.0, -0.85, 0.0}, {0.0, 0.0, 0.0}} //P8 FIN DEL TRIÁNGULO ABAJO
		
	};
	*/
	// CASAAAAAAAAAAAAAA

	/*Vertex vertices[] ={
		//FONDO AZUL Y VERDE
		{{-4.0, 4.0, 0.0}, {0, 0, 255}}, {{-4.0, -0.07, 0.0}, {0, 0, 255}},{{4.0, 4.0, 0.0}, {0, 0, 255}},
		{{4.0, -0.07, 0.0}, {0, 0, 255}}, {{-4.0, -0.07, 0.0}, {0, 0, 255}},{{4.0, 4.0, 0.0}, {0, 0, 255}},

		{{-4.0, -4.0, 0.0}, {0, 0.6, 0}}, {{4.0, -4.0, 0.0}, {0, 0.6, 0}},{{4.0, -0.07, 0.0}, {0, 0.6, 0}},
		{{-4.0, -4.0, 0.0}, {0, 0.6, 0}}, {{-4.0, -0.07, 0.0}, {0, 0.6, 0}},{{4.0, -0.07, 0.0}, {0, 0.6, 0}},

		//BARDA Lineas
		{{-4.0, -0.1, 0.0}, {0.82, 0.52, 0.0}}, {{-4.0, -0.12, 0.0}, {0.82, 0.52, 0.0}},{{4.0, -0.12, 0.0}, {0.82, 0.52, 0.0}}, {{4.0, -0.12, 0.0}, {0.82, 0.52, 0.0}}, {{-4.0, -0.12, 0.0}, {0.82, 0.52, 0.0}},{{4.0, -0.12, 0.0}, {0.82, 0.52, 0.0}},
		{{-4.0, -0.2, 0.0}, {0.82, 0.52, 0.0}}, {{-4.0, -0.22, 0.0}, {0.82, 0.52, 0.0}},{{4.0, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{-4.0, -0.2, 0.0}, {0.82, 0.52, 0.0}}, {{4.0, -0.2, 0.0}, {0.82, 0.52, 0.0}},{{4.0, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		//BARDA PICOS
		{{-0.3, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{-0.3, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.36, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.36, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.3, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.36, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.3, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.33, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{-0.36, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{-0.41, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{-0.41, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.47, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.47, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.41, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.47, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.41, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.44, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{-0.47, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{-0.52, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{-0.52, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.58, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.58, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.52, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.58, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.52, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.55, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{-0.58, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{-0.63, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{-0.63, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.69, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.69, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.63, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.69, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.63, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.66, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{-0.69, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{-0.74, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{-0.74, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.80, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.80, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.74, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.80, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.74, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.77, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{-0.80, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{-0.85, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{-0.85, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.91, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.91, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.85, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-0.91, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.85, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.88, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{-0.91, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{-0.96, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{-0.96, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-1.02, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-1.02, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.96, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{-1.02, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{-0.96, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{-0.99, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{-1.02, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{0.3, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{0.3, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.36, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.36, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.3, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.36, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.3, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.33, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{0.36, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{0.41, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{0.41, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.47, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.47, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.41, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.47, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.41, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.44, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{0.47, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{0.52, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{0.52, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.58, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.58, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.52, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.58, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.52, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.55, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{0.58, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{0.63, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{0.63, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.69, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.69, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.63, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.69, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.63, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.66, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{0.69, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{0.74, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{0.74, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.80, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.80, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.74, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.80, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.74, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.77, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{0.80, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{0.85, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{0.85, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.91, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.91, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.85, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{0.91, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.85, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.88, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{0.91, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		{{0.96, -0.22, 0.0}, {0.82, 0.52, 0.0}}, {{0.96, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{1.02, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{1.02, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.96, -0.06, 0.0}, {0.82, 0.52, 0.0}},{{1.02, -0.22, 0.0}, {0.82, 0.52, 0.0}},
		{{0.96, -0.06, 0.0}, {0.82, 0.52, 0.0}}, {{0.99, -0.02, 0.0}, {0.82, 0.52, 0.0}},{{1.02, -0.06, 0.0}, {0.82, 0.52, 0.0}},

		//FACHADA FONDO
		{{0.25, 0.2, 0.0}, {248, 248, 255}}, {{0.25, -0.2, 0.0}, {248, 248, 255}},{{-0.25, -0.2, 0.0}, {248, 248, 255}},{{-0.25, -0.2, 0.0}, {248, 248, 255}},{{0.25, 0.2, 0.0}, {248, 248, 255}},{{-0.25, 0.2, 0.0}, {248, 248, 255}},
		//TRIANGULO BASE 
		{{-0.25, 0.2, 0.0}, {255, 0.0, 0.0}}, {{0.25, 0.2, 0.0}, {255, 0.0, 0.0}},{{0.0, 0.42, 0.0}, {255, 0.0, 0.0}},//-------------------
		//TRIANGULITOS ROJOS SOBRE LA CASA
		{{0.27, 0.18, 0.0}, {0.2, 0.3, 0.0}}, {{0.0, 0.42, 0.0}, {0.2, 0.3, 0.0}},{{0.0, 0.45, 0.0}, {0.2, 0.3, 0.0}},{{0.0, 0.45, 0.0}, {0.2, 0.3, 0.0}},{{0.3, 0.18, 0.0}, {0.2, 0.3, 0.0}},{{0.27, 0.18, 0.0}, {0.2, 0.3, 0.0}},{{0.0, 0.42, 0.0}, {0.2, 0.3, 0.0}},{{0.0, 0.45, 0.0}, {0.2, 0.3, 0.0}},{{-0.27, 0.18, 0.0}, {0.2, 0.3, 0.0}},{{0.0, 0.45, 0.0}, {0.2, 0.3, 0.0}},{{-0.3, 0.18, 0.0}, {0.2, 0.3, 0.0}},{{-0.27, 0.18, 0.0}, {0.2, 0.3, 0.0}},
		//RECTANGULO SOBRE LA PUERTA
		{{-0.25, 0.2, 0.0}, {0.2, 0.3, 0.0}}, {{-0.25, 0.1, 0.0}, {0.2, 0.3, 0.0}}, {{0.25, 0.2, 0.0}, {0.2, 0.3, 0.0}},{{0.25,0.2, 0.0}, {0.2, 0.3, 0.0}}, {{0.25, 0.1, 0.0}, {0.2, 0.3, 0.0}}, {{-0.25, 0.1, 0.0}, {0.2, 0.3, 0.0}},
		{{-0.24, 0.19, 0.0}, {0.1, 0.68, 0.0}}, {{-0.24, 0.11, 0.0}, {0.1, 0.68, 0.0}}, {{0.24, 0.11, 0.0}, {0.1, 0.68, 0.0}},{{0.24, 0.11, 0.0}, {0.1, 0.68, 0.0}}, {{0.24, 0.19, 0.0}, {0.1, 0.68, 0.0}}, {{-0.24, 0.19, 0.0}, {0.1, 0.68, 0.0}},
		//PUERTA
		{{-0.2, 0.08, 0.0}, {0.1, 0.5, 0.0}}, {{-0.02, 0.08, 0.0}, {0.1, 0.5, 0.0}}, {{-0.2, -0.2, 0.0}, {0.1, 0.5, 0.0}}, {{-0.02, -0.2, 0.0}, {0.1, 0.5, 0.0}}, {{-0.02, 0.08, 0.0}, {0.1, 0.5, 0.0}}, {{-0.2, -0.2, 0.0}, {0.1, 0.5, 0.0}},
		{{-0.18, 0.06, 0.0}, {0.23, 0.67, 0.0}}, {{-0.04, 0.06, 0.0}, {0.23, 0.67, 0.0}}, {{-0.18, -0.18, 0.0}, {0.23, 0.67, 0.0}}, {{-0.04, -0.18, 0.0}, {0.23, 0.67, 0.0}}, {{-0.04, 0.06, 0.0}, {0.23, 0.67, 0.0}}, {{-0.18, -0.18, 0.0}, {0.23, 0.67, 0.0}},
		//VENTANA
		{{0.06, 0.08, 0.0}, {0.32, 0.13, 0.0}}, {{0.18, 0.08, 0.0}, {0.32, 0.13, 0.0}}, {{0.06, -0.08, 0.0}, {0.32, 0.13, 0.0}}, {{0.18, -0.08, 0.0}, {0.32, 0.13, 0.0}}, {{0.18, 0.08, 0.0}, {0.32, 0.13, 0.0}}, {{0.06, -0.08, 0.0}, {0.32, 0.13, 0.0}},
		{{0.07, 0.07, 0.0}, {0.0, 0.0, 0.0}}, {{0.17, 0.07, 0.0}, {0.0, 0.0, 0.0}}, {{0.07, -0.07, 0.0}, {0.0, 0.0, 0.0}}, {{0.17, -0.07, 0.0}, {0.0, 0.0, 0.0}}, {{0.17, 0.07, 0.0}, {0.0, 0.0, 0.0}}, {{0.07, -0.07, 0.0}, {0.0, 0.0, 0.0}},{{0.03, -0.08, 0.0}, {0.0, 0.0, 0.0}}, {{0.03, -0.1, 0.0}, {0.0, 0.0, 0.0}}, {{0.21, -0.08, 0.0}, {0.0, 0.0, 0.0}}, {{0.21, -0.1, 0.0}, {0.0, 0.0, 0.0}}, {{0.03, -0.1, 0.0}, {0.0, 0.0, 0.0}}, {{0.21, -0.08, 0.0}, {0.0, 0.0, 0.0}},
		{{0.07, 0.03, 0.0}, {0.32, 0.13, 0.0}}, {{0.07, 0.04, 0.0}, {0.32, 0.13, 0.0}}, {{0.17, 0.03, 0.0}, {0.32, 0.13, 0.0}}, {{0.17, 0.04, 0.0}, {0.32, 0.13, 0.0}}, {{0.07, 0.04, 0.0}, {0.32, 0.13, 0.0}}, {{0.17, 0.03, 0.0}, {0.32, 0.13, 0.0}},
		{{0.115, 0.03, 0.0}, {0.32, 0.13, 0.0}}, {{0.125, 0.03, 0.0}, {0.32, 0.13, 0.0}}, {{0.115, -0.07, 0.0}, {0.32, 0.13, 0.0}},
		{{0.125, -0.07, 0.0}, {0.32, 0.13, 0.0}}, {{0.125, 0.03, 0.0}, {0.32, 0.13, 0.0}}, {{0.115, -0.07, 0.0}, {0.32, 0.13, 0.0}},
		//VENTANA DE ARRIBA
		{{0.03, 0.33, 0.0}, {0.14, 1.24, 1.0}}, {{-0.04, 0.33, 0.0}, {0.14, 1.24, 1.0}}, {{-0.04, 0.25, 0.0}, {0.14, 1.24, 1.0}}, {{0.03, 0.33, 0.0}, {0.14, 1.24, 1.0}}, {{0.03, 0.25, 0.0}, {0.14, 1.24, 1.0}}, {{-0.04, 0.25, 0.0}, {0.14, 1.24, 1.0}},
		//CHIMENEA
		{{0.1, 0.36, 0.0}, {0.34, 1.22, 0.2}},{{0.1, 0.44, 0.0}, {0.34, 1.22, 0.2}},{{0.19, 0.28, 0.0}, {0.34, 1.22, 0.2}}, {{0.19, 0.44, 0.0}, {0.34, 1.22, 0.2}},{{0.1, 0.44, 0.0}, {0.34, 1.22, 0.2}},{{0.19, 0.28, 0.0}, {0.34, 1.22, 0.2}},
		{{0.07, 0.44, 0.0}, {0.34, 1.22, 0.2}},{{0.07, 0.48, 0.0}, {0.34, 1.22, 0.2}},{{0.22, 0.44, 0.0}, {0.35, 1.22, 0.2}},
		{{0.22, 0.48, 0.0}, {0.34, 1.22, 0.2}},{{0.07, 0.48, 0.0}, {0.34, 1.22, 0.2}},{{0.22, 0.44, 0.0}, {0.34, 1.22, 0.2}},
	*/
	
	Vertex vertices[] = {

		{{0, 0, 0}, {1, 1, 1}},		/*P*/
		{{1, 0, 0}, {1, 1, 1}},		/*P*/
		{{0, 1, 0}, {1, 1, 1}},		/*P*/

		//CETRO PARTE CUADRADA
			//PALO
				{{0.13, -0.485, 0.0}, {0, 0, 0}},		/*P*/	{{0.145, -0.49, 0.0}, {0, 0, 0}},		/*P1*/	{{0.335, -0.105, 0.0}, {0, 0, 0}},		/*P3*/
				{{0.13, -0.485, 0.0}, {0, 0, 0}},		/*P*/	{{0.335, -0.105, 0.0}, {0, 0, 0}},		/*P3*/	{{0.32, -0.105, 0.0}, {0, 0, 0}},		/*P2*/
				{{0.065, -0.48, 0.0}, {0, 0, 0}},		/*P4*/	{{0.085, -0.48, 0.0}, {0, 0, 0}},		/*P5*/	{{0.27, -0.085, 0.0}, {0, 0, 0}},		/*P7*/
				{{0.065, -0.48, 0.0}, {0, 0, 0}},		/*P4*/	{{0.27, -0.085, 0.0}, {0, 0, 0}},		/*P7*/	{{0.255, -0.07, 0.0}, {0, 0, 0}},		/*P6*/
				{{0.085, -0.48, 0.0}, {0.3, 0.3, 0.3}},		/*P5*/	{{0.1, -0.475, 0.0}, {0.3, 0.3, 0.3}},		/*P8*/	{{0.285, -0.09, 0.0}, {0.3, 0.3, 0.3}},		/*P9*/
				{{0.085, -0.48, 0.0}, {0.3, 0.3, 0.3}},		/*P5*/	{{0.285, -0.09, 0.0}, {0.3, 0.3, 0.3}},		/*P9*/	{{0.27, -0.085, 0.0}, {0.3, 0.3, 0.3}},		/*P7*/

				{{0.1, -0.475, 0.0}, {0, 255, 255}},		/*P8*/	{{0.13, -0.485, 0.0}, {0, 255, 255}},		/*P*/	{{0.32, -0.105, 0.0}, {0, 255, 255}},		/*P2*/
				{{0.1, -0.475, 0.0}, {0, 255, 255}},		/*P8*/	{{0.32, -0.105, 0.0}, {0, 255, 255}},		/*P2*/	{{0.285, -0.09, 0.0}, {0, 255, 255}},		/*P9*/

			//MANO
				{{-0.125, -0.66, 0.0}, {0, 0, 0}},		/*M1*/	{{-0.12, -0.67, 0.0}, {0, 0, 0}},		/*M2*/	{{-0.11, -0.655, 0.0}, {0, 0, 0}},		/*M3*/
				{{-0.125, -0.66, 0.0}, {0, 0, 0}},		/*M1*/	{{-0.11, -0.655, 0.0}, {0, 0, 0}},		/*M3*/	{{-0.1, -0.645, 0.0}, {0, 0, 0}},		/*M5*/
				{{-0.125, -0.66, 0.0}, {0, 0, 0}},		/*M1*/	{{-0.1, -0.645, 0.0}, {0, 0, 0}},		/*M5*/	{{-0.1, -0.625, 0.0}, {0, 0, 0}},		/*M4*/
				{{-0.1, -0.645, 0.0}, {0, 0, 0}},		/*M5*/	{{-0.09, -0.625, 0.0}, {0, 0, 0}},		/*M6*/	{{-0.1, -0.625, 0.0}, {0, 0, 0}},		/*M4*/
				{{-0.1, -0.625, 0.0}, {0, 0, 0}},		/*M4*/	{{-0.09, -0.625, 0.0}, {0, 0, 0}},		/*M6*/	{{-0.08, -0.61, 0.0}, {0, 0, 0}},		/*M7*/
				{{-0.1, -0.625, 0.0}, {0, 0, 0}},		/*M4*/	{{-0.08, -0.61, 0.0}, {0, 0, 0}},		/*M7*/	{{-0.08, -0.58, 0.0}, {0, 0, 0}},		/*M8*/
				{{-0.08, -0.58, 0.0}, {0, 0, 0}},		/*M8*/	{{-0.08, -0.61, 0.0}, {0, 0, 0}},		/*M7*/	{{-0.06, -0.56, 0.0}, {0, 0, 0}},		/*M9*/
				{{-0.08, -0.58, 0.0}, {0, 0, 0}},		/*M8*/	{{-0.06, -0.56, 0.0}, {0, 0, 0}},		/*M9*/	{{-0.035, -0.43, 0.0}, {0, 0, 0}},		/*M10*/
				{{-0.035, -0.43, 0.0}, {0, 0, 0}},		/*M10*/	{{-0.06, -0.56, 0.0}, {0, 0, 0}},		/*M9*/	{{-0.02, -0.44, 0.0}, {0, 0, 0}},		/*M11*/
				{{-0.035, -0.43, 0.0}, {0, 0, 0}},		/*M10*/	{{-0.02, -0.44, 0.0}, {0, 0, 0}},		/*M11*/	{{-0.03, -0.42, 0.0}, {0, 0, 0}},		/*M12*/
				{{-0.02, -0.44, 0.0}, {0, 0, 0}},		/*M11*/	{{0.03, -0.43, 0.0}, {0, 0, 0}},		/*M14*/	{{-0.03, -0.42, 0.0}, {0, 0, 0}},		/*M12*/
				{{-0.03, -0.42, 0.0}, {0, 0, 0}},		/*M12*/	{{0.03, -0.43, 0.0}, {0, 0, 0}},		/*M14*/	{{0.03, -0.41, 0.0}, {0, 0, 0}},		/*M13*/
				{{0.03, -0.43, 0.0}, {0, 0, 0}},		/*M14*/	{{0.09, -0.435, 0.0}, {0, 0, 0}},		/*M16*/	{{0.03, -0.41, 0.0}, {0, 0, 0}},		/*M13*/
				{{0.03, -0.41, 0.0}, {0, 0, 0}},		/*M13*/	{{0.09, -0.435, 0.0}, {0, 0, 0}},		/*M16*/	{{0.1, -0.415, 0.0}, {0, 0, 0}},		/*M15*/


				{{0.02, -0.49, 0.0}, {0, 0, 0}},		/*D2*/	{{0.03, -0.48, 0.0}, {0, 0, 0}},		/*D1*/	{{0.065, -0.48, 0.0}, {0, 0, 0}},		/*P4*/
				{{0.02, -0.49, 0.0}, {0, 0, 0}},		/*D2*/	{{0.1, -0.49, 0.0}, {0, 0, 0}},			/*D4*/	{{0.065, -0.48, 0.0}, {0, 0, 0}},		/*P4*/
				{{0.065, -0.48, 0.0}, {0, 0, 0}},		/*P4*/	{{0.1, -0.49, 0.0}, {0, 0, 0}},			/*D4*/	{{0.1, -0.475, 0.0}, {0, 0, 0}},		/*P8*/
				{{0.1, -0.475, 0.0}, {0, 0, 0}},		/*P8*/	{{0.1, -0.49, 0.0}, {0, 0, 0}},			/*D4*/	{{0.1, -0.475, 0.0}, {0, 0, 0}},		/*P8*/
				{{0.1, -0.49, 0.0}, {0, 0, 0}},			/*D4*/	{{0.13, -0.485, 0.0}, {0, 0, 0}},		/*P*/	{{0.1, -0.475, 0.0}, {0, 0, 0}},		/*P8*/
				{{0.1, -0.49, 0.0}, {0, 0, 0}},			/*D4*/	{{0.145, -0.49, 0.0}, {0, 0, 0}},		/*P1*/	{{0.13, -0.485, 0.0}, {0, 0, 0}},		/*P*/
				{{0.1, -0.49, 0.0}, {0, 0, 0}},			/*D4*/	{{0.15, -0.5, 0.0}, {0, 0, 0}},			/*D5*/	{{0.145, -0.49, 0.0}, {0, 0, 0}},		/*P1*/
				{{0.15, -0.5, 0.0}, {0, 0, 0}},			/*D5*/	{{0.18, -0.495, 0.0}, {0, 0, 0}},		/*D6*/	{{0.145, -0.49, 0.0}, {0, 0, 0}},		/*P1*/
				{{0.15, -0.5, 0.0}, {0, 0, 0}},			/*D5*/	{{0.2, -0.5, 0.0}, {0, 0, 0}},			/*D7*/	{{0.18, -0.495, 0.0}, {0, 0, 0}},		/*D6*/
				{{0.15, -0.5, 0.0}, {0, 0, 0}},			/*D5*/	{{0.215, -0.52, 0.0}, {0, 0, 0}},		/*D8*/	{{0.2, -0.5, 0.0}, {0, 0, 0}},			/*D7*/
				{{0.215, -0.52, 0.0}, {0, 0, 0}},		/*D8*/	{{0.25, -0.525, 0.0}, {0, 0, 0}},		/*D9*/	{{0.2, -0.5, 0.0}, {0, 0, 0}},			/*D7*/

				{{0.215, -0.52, 0.0}, {0, 0, 0}},		/*D8*/	{{0.25, -0.55, 0.0}, {0, 0, 0}},		/*D10*/	{{0.25, -0.525, 0.0}, {0, 0, 0}},		/*D9*/

				{{0.25, -0.55, 0.0}, {0, 0, 0}},		/*D10*/
				{{0.27, -0.54, 0.0}, {0, 0, 0}},		/*D11*/
				{{0.25, -0.525, 0.0}, {0, 0, 0}},		/*D9*/

				{{0.23, -0.62, 0.0}, {0, 0, 0}},		/*D12*/
				{{0.27, -0.54, 0.0}, {0, 0, 0}},		/*D11*/
				{{0.25, -0.55, 0.0}, {0, 0, 0}},		/*D10*/

				{{0.23, -0.62, 0.0}, {0, 0, 0}},		/*D12*/
				{{0.24, -0.64, 0.0}, {0, 0, 0}},		/*D13*/
				{{0.27, -0.54, 0.0}, {0, 0, 0}},		/*D11*/

				{{0.18, -0.625, 0.0}, {0, 0, 0}},		/*D14*/
				{{0.24, -0.64, 0.0}, {0, 0, 0}},		/*D13*/
				{{0.23, -0.62, 0.0}, {0, 0, 0}},		/*D12*/

				{{0.18, -0.625, 0.0}, {0, 0, 0}},		/*D14*/
				{{0.18, -0.625, 0.0}, {0, 0, 0}},		/*D15*/
				{{0.195, -0.65, 0.0}, {0, 0, 0}},		/*D13*/

				{{0.11, -0.79, 0.0}, {0, 0, 0}},		/*D17*/
				{{0.18, -0.625, 0.0}, {0, 0, 0}},		/*D15*/
				{{0.18, -0.625, 0.0}, {0, 0, 0}},		/*D14*/

				{{0.11, -0.79, 0.0}, {1, 0.2, 1.2}},		/*D17*/
				{{0.11, -0.79, 0.0}, {1, 0.2, 1.2}},		/*D16*/
				{{0.125, -0.8, 0.0}, {1, 0.2, 1.2}},		/*D15*/

			//PARTE SUPERIOR DEL CETRO
				//BASE CUADRADA	
					//PARTE GRIS Y NEGRA LADO IZQUIERDO
				{{0.34, 0.1, 0.0}, {0.3, 0.3, 0.3}},	/*Z1*/	{{0.365, 0.1, 0.0}, {0.3, 0.3, 0.3}},	/*Z*/	{{0.26, 0.41, 0.0}, {0.3, 0.3, 0.3}},	/*Z3*/
				{{0.26, 0.41, 0.0}, {0.3, 0.3, 0.3}},	/*Z3*/	{{0.365, 0.1, 0.0}, {0.3, 0.3, 0.3}},	/*Z*/	{{0.28, 0.5, 0.0}, {0.3, 0.3, 0.3}},	/*Z5*/
				{{0.335, 0.11, 0.0}, {0,0,0}},	/*Z2*/	{{0.34, 0.1, 0.0}, {0,0,0}},	/*Z1*/	{{0.245, 0.425, 0.0}, {0,0,0}},	/*Z4*/
				{{0.245, 0.425, 0.0}, {0,0,0}},	/*Z4*/	{{0.34, 0.1, 0.0}, {0,0,0}},	/*Z1*/	{{0.26, 0.41, 0.0}, {0,0,0}},	/*Z3*/
				{{0.245, 0.425, 0.0}, {0,0,0}},	/*Z4*/	{{0.26, 0.41, 0.0}, {0,0,0}},	/*Z3*/	{{0.28, 0.5, 0.0}, {0,0,0}},	/*Z5*/
				{{0.245, 0.425, 0.0}, {0,0,0}},	/*Z4*/	{{0.28, 0.5, 0.0}, {0,0,0}},	/*Z5*/	{{0.26, 0.53, 0.0}, {0,0,0}},	/*Z6*/
				{{0.28, 0.5, 0.0}, {0,0,0}},	/*Z5*/	{{0.46, 0.57, 0.0}, {0,0,0}},	/*Z7*/	{{0.26, 0.53, 0.0}, {0,0,0}},	/*Z6*/
				{{0.39, 0.17, 0.0}, {0.588,0.48,0.94}},		/*E32*/	{{0.455, 0.205, 0.0}, {0.588,0.48,0.94}},	/*E31*/	{{0.47, 0.24, 0.0}, {0.588,0.48,0.94}},		/*C1*/
				{{0.39, 0.17, 0.0}, {0.588,0.48,0.94}},		/*E32*/	{{0.47, 0.24, 0.0}, {0.588,0.48,0.94}},		/*C1*/	{{0.405, 0.215, 0.0}, {0.588,0.48,0.94}},	/*C2*/

					//PARTE GRIS A
				{{0.41, 0.08, 0.0}, {0.3, 0.3, 0.3}},	/*A*/	{{0.45, 0.06, 0.0}, {0.3, 0.3, 0.3}},	/*B*/	{{0.76, 0.18, 0.0}, {0.3, 0.3, 0.3}},	/*C*/
				{{0.41, 0.08, 0.0}, {0.3, 0.3, 0.3}},	/*A*/	{{0.76, 0.18, 0.0}, {0.3, 0.3, 0.3}},	/*C*/	{{0.825, 0.27, 0.0}, {0.3, 0.3, 0.3}},	/*D*/
					//PARTE BAJA DE A
				{{0.45, 0.06, 0.0}, {0,0,0}},	/*B*/	{{0.77, 0.16, 0.0}, {0,0,0}},	/*C1*/	{{0.76, 0.18, 0.0}, {0,0,0}},	/*C*/
				{{0.76, 0.18, 0.0}, {0,0,0}},	/*C*/	{{0.77, 0.16, 0.0}, {0,0,0}},	/*C1*/	{{0.84, 0.265, 0.0}, {0,0,0}},	/*D1*/
				{{0.76, 0.18, 0.0}, {0,0,0}},	/*C*/	{{0.84, 0.265, 0.0}, {0,0,0}},	/*D1*/	{{0.825, 0.27, 0.0}, {0,0,0}},	/*D*/
					//PARTE VERDE SOBRE A
				{{0.385, 0.085, 0.0}, {0, 255, 255}},	/*L*/	{{0.41, 0.08, 0.0}, {0.3, 255, 255}},	/*A*/	{{0.825, 0.27, 0.0}, {0,255,255}},		/*D*/
				{{0.385, 0.085, 0.0}, {0, 255, 255}},	/*L*/	{{0.825, 0.27, 0.0}, {0,255,255}},		/*D*/	{{0.76, 0.295, 0.0}, {0,255,255}},		/*D2*/
				{{0.76, 0.295, 0.0}, {0,255,255}},		/*D2*/	{{0.825, 0.27, 0.0}, {0,255,255}},		/*D*/	{{0.74, 0.45, 0.0}, {0,255,255}},		/*E*/
					//PARDE DERECHA DE A, FRANJA NEGRA
				{{0.825, 0.27, 0.0}, {0,0,0}},			/*D*/	{{0.84, 0.265, 0.0}, {0,0,0}},			/*D1*/	{{0.74, 0.47, 0.0}, {0,0,0}},			/*E1*/
				{{0.825, 0.27, 0.0}, {0,0,0}},			/*D*/	{{0.74, 0.47, 0.0}, {0,0,0}},			/*E1*/	{{0.74, 0.45, 0.0}, {0,0,0}},			/*E*/
					//LADO DERECHO W
				{{0.745, 0.435, 0.0}, {0.3,0.3,0.3}},	/*E2*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},			/*D2*/	{{0.74, 0.45, 0.0}, {0.3,0.3,0.3}},				/*E*/
				{{0.735, 0.41, 0.0}, {0.3,0.3,0.3}},	/*E3*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},			/*D2*/	{{0.745, 0.435, 0.0}, {0.3,0.3,0.3}},			/*E2*/
				{{0.73, 0.4, 0.0}, {0.3,0.3,0.3}},		/*E4*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},			/*D2*/	{{0.735, 0.41, 0.0}, {0.3,0.3,0.3}},			/*E3*/
				{{0.72, 0.38, 0.0}, {0.3,0.3,0.3}},		/*E5*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},			/*D2*/	{{0.73, 0.4, 0.0}, {0.3,0.3,0.3}},			/*E4*/
				{{0.715, 0.36, 0.0}, {0.3,0.3,0.3}},	/*E6*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},			/*D2*/	{{0.72, 0.38, 0.0}, {0.3,0.3,0.3}},			/*E5*/
				{{0.71, 0.35, 0.0}, {0.3,0.3,0.3}},		/*E7*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},			/*D2*/	{{0.715, 0.36, 0.0}, {0.3,0.3,0.3}},			/*E6*/
				{{0.705, 0.34, 0.0}, {0.3,0.3,0.3}},	/*E8*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},			/*D2*/	{{0.71, 0.35, 0.0}, {0.3,0.3,0.3}},			/*E7*/
				{{0.7, 0.33, 0.0}, {0.3,0.3,0.3}},		/*E9*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},			/*D2*/	{{0.705, 0.34, 0.0}, {0.3,0.3,0.3}},			/*E8*/				
				{{0.69, 0.31, 0.0}, {0.3,0.3,0.3}},		/*E10*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},			/*D2*/	{{0.7, 0.33, 0.0}, {0.3,0.3,0.3}},			/*E9*/
				{{0.68, 0.29, 0.0}, {0.3,0.3,0.3}},		/*E11*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.69, 0.31, 0.0}, {0.3,0.3,0.3}},		/*E10*/
				{{0.675, 0.275, 0.0}, {0.3,0.3,0.3}},	/*E12*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.68, 0.29, 0.0}, {0.3,0.3,0.3}},		/*E11*/				
				{{0.665, 0.265, 0.0}, {0.3,0.3,0.3}},	/*E13*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.675, 0.275, 0.0}, {0.3,0.3,0.3}},	/*E12*/
				{{0.65, 0.25, 0.0}, {0.3,0.3,0.3}},		/*E14*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.665, 0.265, 0.0}, {0.3,0.3,0.3}},	/*E13*/
				{{0.64, 0.24, 0.0}, {0.3,0.3,0.3}},		/*E15*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.65, 0.25, 0.0}, {0.3,0.3,0.3}},		/*E14*/				
				{{0.635, 0.23, 0.0}, {0.3,0.3,0.3}},	/*E16*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.64, 0.24, 0.0}, {0.3,0.3,0.3}},		/*E15*/
				{{0.625, 0.218, 0.0}, {0.3,0.3,0.3}},	/*E17*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.635, 0.23, 0.0}, {0.3,0.3,0.3}},	/*E16*/
				{{0.615, 0.21, 0.0}, {0.3,0.3,0.3}},	/*E18*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.625, 0.218, 0.0}, {0.3,0.3,0.3}},	/*E17*/				
				{{0.605, 0.2, 0.0}, {0.3,0.3,0.3}},		/*E19*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.615, 0.21, 0.0}, {0.3,0.3,0.3}},	/*E18*/
				{{0.59, 0.19, 0.0}, {0.3,0.3,0.3}},		/*E20*/	{{0.76, 0.295, 0.0}, {0.3,0.3,0.3}},	/*D2*/	{{0.605, 0.2, 0.0}, {0.3,0.3,0.3}},		/*E19*/
					
				{{0.455, 0.205, 0.0}, {0.588,0.48,0.94}},	/*E31*/	{{0.465, 0.155, 0.0}, {0.588,0.48,0.94}},		/*E30*/	{{0.49, 0.175, 0.0}, {0.588,0.48,0.94}},		/*B14*/
				{{0.455, 0.205, 0.0}, {0.588,0.48,0.94}},	/*E31*/	{{0.49, 0.175, 0.0}, {0.588,0.48,0.94}},		/*B14*/	{{0.47, 0.24, 0.0}, {0.588,0.48,0.94}},			/*C1*/
				{{0.465, 0.155, 0.0}, {0.588,0.48,0.94}},	/*E30*/	{{0.47, 0.14, 0.0}, {0.588,0.48,0.94}},		/*E29*/	{{0.49, 0.175, 0.0}, {0.588,0.48,0.94}},	/*B14*/
				{{0.47, 0.14, 0.0}, {0.588,0.48,0.94}},		/*E29*/	{{0.485, 0.143, 0.0}, {0.588,0.48,0.94}},	/*E28*/	{{0.49, 0.175, 0.0}, {0.588,0.48,0.94}},	/*B14*/
				{{0.485, 0.143, 0.0}, {0.588,0.48,0.94}},	/*E28*/	{{0.5, 0.145, 0.0}, {0.588,0.48,0.94}},		/*E27*/	{{0.49, 0.175, 0.0}, {0.588,0.48,0.94}},	/*B14*/
				{{0.49, 0.175, 0.0}, {0.588,0.48,0.94}},	/*B14*/	{{0.5, 0.145, 0.0}, {0.588,0.48,0.94}},		/*E27*/	{{0.5, 0.173, 0.0}, {0.588,0.48,0.94}},		/*B1*/
				{{0.5, 0.145, 0.0}, {0.588,0.48,0.94}},		/*E27*/	{{0.52, 0.15, 0.0}, {0.588,0.48,0.94}},		/*E26*/	{{0.5, 0.173, 0.0}, {0.588,0.48,0.94}},		/*B1*/
				{{0.5, 0.173, 0.0}, {0.588,0.48,0.94}},		/*B1*/	{{0.52, 0.15, 0.0}, {0.588,0.48,0.94}},		/*E26*/	{{0.51, 0.18, 0.0}, {0.588,0.48,0.94}},		/*B2*/
				{{0.51, 0.18, 0.0}, {0.588,0.48,0.94}},		/*B2*/	{{0.52, 0.15, 0.0}, {0.588,0.48,0.94}},		/*E26*/	{{0.52, 0.185, 0.0}, {0.588,0.48,0.94}},	/*B3*/
				{{0.52, 0.15, 0.0}, {0.588,0.48,0.94}},		/*E26*/	{{0.535, 0.195, 0.0}, {0.588,0.48,0.94}},	/*B5*/	{{0.52, 0.185, 0.0}, {0.588,0.48,0.94}},	/*B3*/
				{{0.52, 0.15, 0.0}, {0.588,0.48,0.94}},		/*E26*/	{{0.54, 0.16, 0.0}, {0.588,0.48,0.94}},		/*E25*/	{{0.535, 0.195, 0.0}, {0.588,0.48,0.94}},	/*B5*/
				{{0.54, 0.16, 0.0}, {0.588,0.48,0.94}},		/*E25*/	{{0.55, 0.2, 0.0}, {0.588,0.48,0.94}},		/*B6*/	{{0.535, 0.195, 0.0}, {0.588,0.48,0.94}},	/*B5*/
				{{0.54, 0.16, 0.0}, {0.588,0.48,0.94}},		/*E25*/	{{0.55, 0.165, 0.0}, {0.588,0.48,0.94}},	/*E24*/	{{0.55, 0.2, 0.0}, {0.588,0.48,0.94}},		/*B6*/
				{{0.55, 0.165, 0.0}, {0.588,0.48,0.94}},	/*E24*/	{{0.562, 0.205, 0.0}, {0.588,0.48,0.94}},	/*B7*/	{{0.55, 0.2, 0.0}, {0.588,0.48,0.94}},		/*B6*/
				{{0.55, 0.165, 0.0}, {0.588,0.48,0.94}},	/*E24*/	{{0.56, 0.17, 0.0}, {0.588,0.48,0.94}},		/*E23*/	{{0.562, 0.205, 0.0}, {0.588,0.48,0.94}},	/*B7*/
				{{0.56, 0.17, 0.0}, {0.588,0.48,0.94}},		/*E23*/	{{0.57, 0.21, 0.0}, {0.588,0.48,0.94}},		/*B8*/	{{0.562, 0.205, 0.0}, {0.588,0.48,0.94}},	/*B7*/
				{{0.56, 0.17, 0.0}, {0.588,0.48,0.94}},		/*E23*/	{{0.57, 0.175, 0.0}, {0.588,0.48,0.94}},	/*E22*/	{{0.57, 0.21, 0.0}, {0.588,0.48,0.94}},		/*B8*/
				{{0.57, 0.175, 0.0}, {0.588,0.48,0.94} },	/*E22*/	{{0.58, 0.222, 0.0}, {0.588,0.48,0.94} },	/*B9*/	{{0.57, 0.21, 0.0}, {0.588,0.48,0.94} },	/*B8*/
				{{0.57, 0.175, 0.0}, {0.588,0.48,0.94} },	/*E22*/	{{0.58, 0.18, 0.0}, {0.588,0.48,0.94} },	/*E21*/	{{0.58, 0.222, 0.0}, {0.588,0.48,0.94} },	/*B9*/
				{{0.58, 0.18, 0.0}, {0.588,0.48,0.94} },	/*E21*/	{{0.59, 0.19, 0.0}, {0.588,0.48,0.94}},		/*E20*/	{{0.58, 0.222, 0.0}, {0.588,0.48,0.94} },	/*B9*/
				{{0.59, 0.19, 0.0}, {0.588,0.48,0.94}},		/*E20*/	{{0.59, 0.225, 0.0}, {0.588,0.48,0.94}},	/*B10*/	{{0.58, 0.222, 0.0}, {0.588,0.48,0.94}},	/*B9*/
				{{0.59, 0.19, 0.0}, {0.588,0.48,0.94}},		/*E20*/	{{0.6, 0.235, 0.0}, {0.588,0.48,0.94}},		/*B11*/	{{0.59, 0.225, 0.0}, {0.588,0.48,0.94}},	/*B10*/
				{{0.59, 0.19, 0.0}, {0.588,0.48,0.94}},		/*E20*/	{{0.605, 0.2, 0.0}, {0.588,0.48,0.94}},		/*E19*/	{{0.6, 0.235, 0.0}, {0.588,0.48,0.94}},		/*B11*/
				{{0.605, 0.2, 0.0}, {0.588,0.48,0.94}},		/*E19*/	{{0.61, 0.245, 0.0}, {0.588,0.48,0.94}},	/*B12*/	{{0.6, 0.235, 0.0}, {0.588,0.48,0.94}},		/*B11*/
				{{0.605, 0.2, 0.0}, {0.588,0.48,0.94}},		/*E19*/	{{0.615, 0.21, 0.0}, {0.588,0.48,0.94}},	/*E18*/	{{0.61, 0.245, 0.0}, {0.588,0.48,0.94}},	/*B12*/
				{{0.615, 0.21, 0.0}, {0.588,0.48,0.94}},	/*E18*/	{{0.62, 0.255, 0.0}, {0.588,0.48,0.94}},	/*B13*/	{{0.61, 0.245, 0.0}, {0.588,0.48,0.94}},	/*B12*/
				{{0.615, 0.21, 0.0}, {0.588,0.48,0.94}},	/*E18*/	{{0.625, 0.218, 0.0}, {0.588,0.48,0.94}},	/*E17*/	{{0.62, 0.255, 0.0}, {0.588,0.48,0.94}},	/*B13*/
				{{0.625, 0.218, 0.0}, {0.588,0.48,0.94}},	/*E17*/	{{0.63, 0.265, 0.0}, {0.588,0.48,0.94}},	/*B14*/	{{0.62, 0.255, 0.0}, {0.588,0.48,0.94}},	/*B13*/
				{{0.625, 0.218, 0.0}, {0.588,0.48,0.94}},	/*E17*/	{{0.635, 0.23, 0.0}, {0.588,0.48,0.94}},	/*E16*/	{{0.63, 0.265, 0.0}, {0.588,0.48,0.94}},	/*B14*/
				{{0.635, 0.23, 0.0}, {0.588,0.48,0.94}},	/*E16*/	{{0.64, 0.277, 0.0}, {0.588,0.48,0.94}},	/*B15*/	{{0.63, 0.265, 0.0}, {0.588,0.48,0.94}},	/*B14*/
				{{0.635, 0.23, 0.0}, {0.588,0.48,0.94}},	/*E16*/	{{0.64, 0.24, 0.0}, {0.588,0.48,0.94}},		/*E15*/	{{0.64, 0.277, 0.0}, {0.588,0.48,0.94}},	/*B15*/
				{{0.64, 0.24, 0.0}, {0.588,0.48,0.94}},		/*E15*/	{{0.65, 0.25, 0.0}, {0.588,0.48,0.94}},		/*E14*/	{{0.64, 0.277, 0.0}, {0.588,0.48,0.94}},	/*B15*/
				{{0.65, 0.25, 0.0}, {0.588,0.48,0.94}},		/*E14*/	{{0.66, 0.295, 0.0}, {0.588,0.48,0.94}},	/*B16*/	{{0.64, 0.277, 0.0}, {0.588,0.48,0.94}},	/*B15*/
				{{0.65, 0.25, 0.0}, {0.588,0.48,0.94}},		/*E14*/	{{0.665, 0.265, 0.0}, {0.588,0.48,0.94}},	/*E13*/	{{0.66, 0.295, 0.0}, {0.588,0.48,0.94}},	/*B16*/
				{{0.665, 0.265, 0.0}, {0.588,0.48,0.94}},	/*E13*/	{{0.67, 0.31, 0.0}, {0.588,0.48,0.94}},		/*B17*/	{{0.66, 0.295, 0.0}, {0.588,0.48,0.94}},	/*B16*/
				{{0.665, 0.265, 0.0}, {0.588,0.48,0.94}},	/*E13*/	{{0.675, 0.275, 0.0}, {0.588,0.48,0.94}},	/*E12*/	{{0.67, 0.31, 0.0}, {0.588,0.48,0.94}},		/*B17*/
				{{0.675, 0.275, 0.0}, {0.588,0.48,0.94}},	/*E12*/	{{0.68, 0.29, 0.0}, {0.588,0.48,0.94}},		/*E11*/	{{0.67, 0.31, 0.0}, {0.588,0.48,0.94}},		/*B17*/
				{{0.68, 0.29, 0.0}, {0.588,0.48,0.94}},		/*E11*/	{{0.68, 0.32, 0.0}, {0.588,0.48,0.94}},		/*B18*/	{{0.67, 0.31, 0.0}, {0.588,0.48,0.94}},		/*B17*/
				{{0.68, 0.29, 0.0}, {0.588,0.48,0.94}},		/*E11*/	{{0.69, 0.31, 0.0}, {0.588,0.48,0.94}},		/*E10*/	{{0.68, 0.32, 0.0}, {0.588,0.48,0.94}},		/*B18*/
				{{0.69, 0.31, 0.0}, {0.588,0.48,0.94}},		/*E10*/	{{0.695, 0.345, 0.0}, {0.588,0.48,0.94}},	/*B19*/	{{0.68, 0.32, 0.0}, {0.588,0.48,0.94}},		/*B18*/
				{{0.69, 0.31, 0.0}, {0.588,0.48,0.94}},		/*E10*/	{{0.7, 0.33, 0.0}, {0.588,0.48,0.94} },		/*E9*/	{{0.695, 0.345, 0.0}, {0.588,0.48,0.94}},	/*B19*/
				{{0.7, 0.33, 0.0}, {0.588,0.48,0.94}},		/*E9*/	{{0.705, 0.34, 0.0}, {0.588,0.48,0.94}},	/*E8*/	{{0.695, 0.345, 0.0}, {0.588,0.48,0.94}},	/*B19*/
				{{0.705, 0.34, 0.0}, {0.588,0.48,0.94}},	/*E8*/	{{0.71, 0.35, 0.0}, {0.588,0.48,0.94}},		/*E7*/	{{0.695, 0.345, 0.0}, {0.588,0.48,0.94}},	/*B19*/
				{{0.695, 0.345, 0.0}, {0.588,0.48,0.94}},	/*B19*/	{{0.71, 0.35, 0.0}, {0.588,0.48,0.94}},		/*E7*/	{{0.7, 0.355, 0.0}, {0.588,0.48,0.94}},		/*B20*/
				{{0.7, 0.355, 0.0}, {0.588,0.48,0.94}},		/*B20*/	{{0.71, 0.35, 0.0}, {0.588,0.48,0.94}},		/*E7*/	{{0.73, 0.4, 0.0}, {0.588,0.48,0.94}},		/*E4*/
				{{0.7, 0.355, 0.0}, {0.588,0.48,0.94}},		/*B20*/	{{0.71, 0.35, 0.0}, {0.588,0.48,0.94}},		/*E7*/	{{0.715, 0.36, 0.0}, {0.588,0.48,0.94}},	/*E6*/
				
		
			//CONTORNO
				{{0.22, -0.065, 0.0}, {0, 0, 0}},	/*A*/	{{0.38, -0.135, 0.0}, {0, 0, 0}},	/*B*/	{{0.24, -0.055, 0.0}, {0, 0, 0}},	/*C*/	{{0.38, -0.135, 0.0}, {0, 0, 0}},	/*B*/	{{0.385, -0.12, 0.0}, {0, 0, 0}},	/*D*/	{{0.24, -0.055, 0.0}, {0, 0, 0}},	/*C*/
				{{0.37, -0.12, 0.0}, {0, 0, 0}},	/*E*/	{{0.38, -0.135, 0.0}, {0, 0, 0}},	/*B*/	{{0.49, 0.05, 0.0}, {0, 0, 0}},		/*F*/	{{0.37, -0.12, 0.0}, {0, 0, 0}},	/*E*/	{{0.49, 0.05, 0.0}, {0, 0, 0}},		/*F*/	{{0.47, 0.045, 0.0}, {0, 0, 0}},	/*G*/
				{{0.49, 0.05, 0.0}, {0, 0, 0}},		/*F*/	{{0.47, 0.045, 0.0}, {0, 0, 0}},	/*G*/	{{0.285, 0.13, 0.0}, {0, 0, 0}},	/*H*/	{{0.295, 0.115, 0.0}, {0, 0, 0}},	/*I*/	{{0.47, 0.045, 0.0}, {0, 0, 0}},	/*G*/	{{0.285, 0.13, 0.0}, {0, 0, 0}},	/*H*/
				{{0.22, -0.065, 0.0}, {0, 0, 0}},	/*A*/	{{0.24, -0.055, 0.0}, {0, 0, 0}},	/*C*/	{{0.295, 0.115, 0.0}, {0, 0, 0}},	/*I*/	{{0.22, -0.065, 0.0}, {0, 0, 0}},	/*A*/	{{0.295, 0.115, 0.0}, {0, 0, 0}},	/*I*/	{{0.285, 0.13, 0.0}, {0, 0, 0}},	/*H*/
			//DENTRO
				{{0.237, -0.055, 0.0}, {0.7, 0.7, 0.7}},	/*C*/	{{0.32, -0.09, 0.0}, {0.7, 0.7, 0.7}},	/*E4*/	{{0.34, -0.06, 0.0}, {0.7, 0.7, 0.7}},	/*E3*/
				{{0.24, -0.055, 0.0}, {0.7, 0.7, 0.7}},	/*C*/	{{0.34, -0.06, 0.0}, {0.7, 0.7, 0.7}},	/*E3*/	{{0.25, -0.02, 0.0}, {0.7, 0.7, 0.7}},	/*C2*/

				{{0.255, -0.01, 0.0}, {0.4, 0.4, 0.4}},	/*F2*/	{{0.346, -0.05, 0.0}, {0.4, 0.4, 0.4}},	/*F1*/	{{0.385, 0.015, 0.0}, {0.4, 0.4, 0.4}},	/*F4*/
				{{0.255, -0.01, 0.0}, {0.4, 0.4, 0.4}},	/*F2*/	{{0.385, 0.015, 0.0}, {0.4, 0.4, 0.4}},	/*F4*/	{{0.277, 0.06, 0.0}, {0.4, 0.4, 0.4}},	/*F3*/

				{{0.282, 0.075, 0.0}, {0.7, 0.7, 0.7}},	/*G2*/	{{0.391, 0.025, 0.0}, {0.7, 0.7, 0.7}},	/*G1*/	{{0.42, 0.0655, 0.0}, {0.7, 0.7, 0.7}},	/*G3*/
				{{0.282, 0.075, 0.0}, {0.7, 0.7, 0.7}},	/*G2*/	{{0.42, 0.0655, 0.0}, {0.7, 0.7, 0.7}},	/*G3*/	{{0.295, 0.115, 0.0}, {0.7, 0.7, 0.7}},	/*I*/

				{{0.32, -0.09, 0.0}, {0, 255, 255}},	/*E4*/	{{0.37, -0.12, 0.0}, {0, 255, 255}},	/*E*/	{{0.34, -0.06, 0.0}, {0, 255, 255}},	/*E3*/
				{{0.34, -0.06, 0.0}, {0, 255, 255}},	/*E3*/	{{0.37, -0.12, 0.0}, {0, 255, 255}},	/*E*/	{{0.346, -0.05, 0.0}, {0, 255, 255}},	/*F1*/
				{{0.346, -0.05, 0.0}, {0, 255, 255}},	/*F1*/	{{0.37, -0.12, 0.0}, {0, 255, 255}},	/*E*/	{{0.385, 0.015, 0.0}, {0, 255, 255}},	/*F4*/
				{{0.385, 0.015, 0.0}, {0, 255, 255}},	/*F4*/	{{0.37, -0.12, 0.0}, {0, 255, 255}},	/*E*/	{{0.391, 0.025, 0.0}, {0, 255, 255}},	/*G1*/
				{{0.391, 0.025, 0.0}, {0, 255, 255}},	/*G1*/	{{0.37, -0.12, 0.0}, {0, 255, 255}},	/*E*/	{{0.42, 0.0655, 0.0}, {0, 255, 255}},	/*G3*/
				{{0.42, 0.0655, 0.0}, {0, 255, 255}},	/*G3*/	{{0.37, -0.12, 0.0}, {0, 255, 255}},	/*E*/	{{0.47, 0.045, 0.0}, {0, 255, 255}},	/*G*/

				{{0.277, 0.06, 0.0}, {0, 0, 0}},	/*F3*/	{{0.438, -0.014, 0.0}, {0, 0, 0}},	/*N*/	{{0.444, 0.003, 0.0}, {0, 0, 0}},	/*N1*/
				{{0.277, 0.06, 0.0}, {0, 0, 0}},	/*F3*/	{{0.444, 0.003, 0.0}, {0, 0, 0}},	/*N1*/	{{0.282, 0.075, 0.0}, {0, 0, 0}},	/*G2*/

				{{0.25, -0.02, 0.0}, {0, 0, 0}},	/*C2*/	{{0.39, -0.085, 0.0}, {0, 0, 0}},	/*E2*/		{{0.4, -0.072, 0.0}, {0, 0, 0}},	/*N2*/
				{{0.25, -0.02, 0.0}, {0, 0, 0}},	/*C2*/	{{0.4, -0.072, 0.0}, {0, 0, 0}},	/*N2*/	{{0.255, -0.01, 0.0}, {0, 0, 0}},	/*F2*/





	};


	size_t bufferSize = sizeof(vertices);
	size_t vertexSize = sizeof(vertices[0]);
	size_t rgbOffset = sizeof(vertices[0].m_Pos);

	std::cout << "vertices" << std::endl;
	std::cout << "bufferSize" << bufferSize << std::endl;
	std::cout << "vertexSize" << vertexSize << std::endl;
	std::cout << "rgbOffset" << rgbOffset << std::endl;
	// Se crea el ID del VAO
	/*
	El VAO es un objeto que nos permite almacenar la estructura de nuestros datos,
	Esto es de gran utilidad debido a que solo se configura la estructura una vez
	y se puede utilizar en el loop de renderizado
	*/
	glGenVertexArrays(1, &VAO); //Numero de buffers a crear y  el apuntador VAO a la varoiable entera
	// Cambiamos el estado para indicar que usaremos el id del VAO
	glBindVertexArray(VAO);
	// Se crea el VBO (buffer de datos) asociado al VAO
	glGenBuffers(1, &VBO); //VBO almacena el arreglo de vértices de nuestra geometría

	// Cambiamos el estado para indicar que usaremos el id del VBO como Arreglo de vertices (GL_ARRAY_BUFFER)
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	// Copiamos los datos de los vertices a memoria del procesador grafico
	//           TIPO DE BUFFER     TAMANIO          DATOS    MODO (No cambian los datos)
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	// Se crea un indice para el atributo del vertice posicion, debe corresponder al location del atributo del shader
	// indice del atributo, Cantidad de datos, Tipo de dato, Normalizacion, Tamanio del bloque (Stride), offset
	//vertexSize = 6 * sizeof(float) = 24 bytes
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, vertexSize, (GLvoid*)0);
	// Se habilita el atributo del vertice con indice 0 (posicion)
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, vertexSize, (GLvoid*)rgbOffset);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);

	// Ya que se configuro, se regresa al estado original
	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);
	//Se habilita el atributo de vertices con indice 0 (posicion)

}

void destroy() {
	glfwDestroyWindow(window);
	glfwTerminate();
	// --------- IMPORTANTE ----------
	// Eliminar los shader y buffers creados.

	glUseProgram(0);
	glDetachShader(shaderProgramID, vertexShaderID);
	glDetachShader(shaderProgramID, fragmentShaderID);

	glDeleteShader(vertexShaderID);
	glDeleteShader(fragmentShaderID);

	glDeleteProgram(shaderProgramID);

	glBindVertexArray(VAO);
	glDisableVertexAttribArray(0);

	glBindBuffer(GL_ARRAY_BUFFER,VBO);
	glDeleteBuffers(1, &VBO);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	glBindVertexArray(0);
	glDeleteVertexArrays(1, &VAO);
}

void reshapeCallback(GLFWwindow* Window, int widthRes, int heightRes) {
	screenWidth = widthRes;
	screenHeight = heightRes;
	glViewport(0, 0, widthRes, heightRes);
}

void keyCallback(GLFWwindow* window, int key, int scancode, int action, int mode) {
	if (action == GLFW_PRESS) {
		switch (key) {
		case GLFW_KEY_ESCAPE:
			exitApp = true;
			break;
		}
	}
}

void mouseCallback(GLFWwindow* window, double xpos, double ypos) {
	lastMousePosX = xpos;
	lastMousePosY = ypos;
}

void mouseButtonCallback(GLFWwindow* window, int button, int state, int mod) {
	if (state == GLFW_PRESS) {
		switch (button) {
		case GLFW_MOUSE_BUTTON_RIGHT:
			std::cout << "lastMousePos.y:" << lastMousePosY << std::endl;
			break;
		case GLFW_MOUSE_BUTTON_LEFT:
			std::cout << "lastMousePos.x:" << lastMousePosX << std::endl;
			break;
		case GLFW_MOUSE_BUTTON_MIDDLE:
			std::cout << "lastMousePos.x:" << lastMousePosX << std::endl;
			std::cout << "lastMousePos.y:" << lastMousePosY << std::endl;
			break;
		}
	}
}

bool processInput(bool continueApplication){
	if (exitApp || glfwWindowShouldClose(window) != 0) {
		return false;
	}
	deltaTime = 1 / TimeManager::Instance().CalculateFrameRate(false);
	glfwPollEvents();
	return continueApplication;
}

void applicationLoop() {
	bool psi = true;
	while (psi) {
		psi = processInput(true);
		glClear(GL_COLOR_BUFFER_BIT);

		// Esta linea esta comentada debido a que de momento no se usan los shaders
		glUseProgram(shaderProgramID);

		// Se indica el buffer de datos y la estructura de estos utilizando solo el id del VAO
		glBindVertexArray(VAO);
		// Primitiva de ensamble
		glDrawArrays(GL_TRIANGLES, 0, 700);
		glBindVertexArray(0);

		glfwSwapBuffers(window);
	}
}

int main(int argc, char ** argv) {
	init(800, 900, "Window GLFW", false);
	applicationLoop();
	destroy();
	return 1;
}
